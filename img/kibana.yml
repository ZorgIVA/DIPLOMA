---
- name: Установка и настройка Kibana
  hosts: kibana_host
  become: yes
  vars:
    # Получаем IP Elasticsearch из inventory
    elasticsearch_ip: "{{ hostvars['elasticsearch_host']['ansible_host'] }}"
    # Путь к архиву Kibana на управляющей машине (локальной машине, где запускается Ansible)
    kibana_local_tarball_path: "/home/zorg/kibana-9.0.4-linux-x86_64.tar.gz"
    kibana_tarball_name: "kibana-9.0.4-linux-x86_64.tar.gz"
    kibana_version: "9.0.4"
    kibana_user: "kibana" 
    kibana_group: "kibana"
  tasks:
    # --- Установка зависимостей  ---
    - name: Установить зависимости (curl, tar, pwgen)
      apt:
        name:
          - curl
          - tar
          - pwgen 
        state: present
        update_cache: yes

    # --- Добавлено: Создание пользователя и группы для Kibana ---
    - name: Создать группу для Kibana
      group:
        name: "{{ kibana_group }}"
        state: present
        system: yes

    - name: Создать пользователя для Kibana
      user:
        name: "{{ kibana_user }}"
        group: "{{ kibana_group }}"
        system: yes
        shell: /bin/false 
        home: /opt/kibana
        create_home: no
        comment: "Kibana service user"

    # --- Создание каталога для Kibana ---
    - name: Создать каталог для установки Kibana
      file:
        path: /opt/kibana
        state: directory
        owner: "{{ kibana_user }}"
        group: "{{ kibana_group }}"
        mode: '0755'

    # --- Копирование .tar.gz архива на удаленный хост ---
    - name: Скопировать архив Kibana на удаленный хост
      copy:
        src: "{{ kibana_local_tarball_path }}"
        dest: "/tmp/{{ kibana_tarball_name }}"
        owner: root
        group: root
        mode: '0644'

    # --- Добавлено: Распаковка архива ---
    - name: Распаковать архив Kibana
      unarchive:
        src: "/tmp/{{ kibana_tarball_name }}"
        dest: /opt/kibana
        owner: "{{ kibana_user }}"
        group: "{{ kibana_group }}"
        remote_src: yes 
        
    
    - name: Создать символическую ссылку для Kibana
      file:
        # src: "/opt/kibana/kibana-{{ kibana_version }}-linux-x86_64"
        src: "/opt/kibana/kibana-9.0.4"
        dest: /opt/kibana/current
        state: link
        owner: "{{ kibana_user }}"
        group: "{{ kibana_group }}"

    
    - name: Создать каталог конфигурации Kibana
      file:
        path: /etc/kibana
        state: directory
        owner: "{{ kibana_user }}"
        group: "{{ kibana_group }}"
        mode: '0755'

    - name: Создать каталог данных Kibana
      file:
        path: /var/lib/kibana
        state: directory
        owner: "{{ kibana_user }}"
        group: "{{ kibana_group }}"
        mode: '0755'

    - name: Создать базовый конфигурационный файл kibana.yml
      copy:
        # Создаем конфиг напрямую.
        content: |
          # Kibana is served by a back end server. This setting specifies the port to use.
          server.port: 5601

          # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.
          # The default is 'localhost', which usually means remote machines will not be able to connect.
          # To allow connections from remote users, set this parameter to a non-loopback address.
          server.host: "0.0.0.0"

          # Enables you to specify a path to mount Kibana at if you are running behind a proxy.
          # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath
          # from requests it receives, and to prevent a deprecation warning at startup.
          # This setting cannot end in a slash.
          #server.basePath: ""

          # Specifies whether Kibana should rewrite requests that are prefixed with
          # `server.basePath` or require that they are rewritten by your reverse proxy.
          # Defaults to `false`.
          #server.rewriteBasePath: false

          # The URLs of the Elasticsearch instances to use for all your queries.
          elasticsearch.hosts: ["http://{{ elasticsearch_ip }}:9200"]

          # Kibana uses an index in Elasticsearch to store saved searches, visualizations and
          # dashboards. Kibana creates a new index if the index doesn't already exist.
          #kibana.index: ".kibana"

          # The default application to load.
          #kibana.defaultAppId: "home"

          # If your Elasticsearch is protected with basic authentication, these settings provide
          # the username and password that the Kibana server uses to perform maintenance on the Kibana
          # index at startup. Your Kibana users still need to authenticate with Elasticsearch, which
          # is proxied through the Kibana server.
          #elasticsearch.username: "kibana_system"
          #elasticsearch.password: "pass"

          # Paths to the PEM-format SSL certificate and SSL key files, respectively. These
          # files enable SSL for outgoing requests from the Kibana server to the browser.
          #server.ssl.enabled: false
          #server.ssl.certificate: /path/to/your/server.crt
          #server.ssl.key: /path/to/your/server.key

          # Optional settings that provide the paths to the PEM-format SSL certificate and key files.
          # These files validate that your Elasticsearch backend uses the same key files.
          #elasticsearch.ssl.certificate: /path/to/your/client.crt
          #elasticsearch.ssl.key: /path/to/your/client.key

          # Optional setting that enables you to specify a path to the PEM file for the certificate
          # authority for your Elasticsearch instance.
          #elasticsearch.ssl.certificateAuthorities: [ "/path/to/your/CA.pem" ]

          # To disregard the validity of SSL certificates, change this setting's value to 'none'.
          #elasticsearch.ssl.verificationMode: full

          # Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of
          # the elasticsearch.requestTimeout setting.
          #elasticsearch.pingTimeout: 1500

          # Time in milliseconds to wait for responses from the back end or Elasticsearch. This value
          # must be a positive integer.
          #elasticsearch.requestTimeout: 30000

          # List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side
          # headers, set this value to [] (an empty list).
          #elasticsearch.requestHeadersWhitelist: [ authorization ]

          # Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten
          # by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.
          #elasticsearch.customHeaders: {}

          # Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.
          #elasticsearch.shardTimeout: 30000

          # Logs queries sent to Elasticsearch. Requires logging.verbose set to true.
          #elasticsearch.logQueries: false

          # Specifies the path where Kibana creates the process ID file.
          #pid.file: /run/kibana/kibana.pid

          # Enables you to specify a file where Kibana stores log output.
          logging.dest: /var/log/kibana/kibana.log

          # Set the value of this setting to true to suppress all logging output.
          #logging.silent: false

          # Set the value of this setting to true to suppress all logging output other than error messages.
          #logging.quiet: false

          # Set the value of this setting to true to log all events, including system usage information
          # and all requests.
          #logging.verbose: false

          # Set the interval in milliseconds to sample system and process performance
          # metrics. Minimum is 100ms. Defaults to 5000.
          #ops.interval: 5000

          # Specifies locale to be used for all localizable strings, dates and number formats.
          # Supported languages are the following: English - en , by default , Chinese - zh-CN .
          #i18n.locale: "en"

          # Set the directory path where `kibana.bin` and `kibana-plugin` are located.
          # binPath: /opt/kibana/current/bin

          # Set the directory path where Kibana stores data.
          path.data: /var/lib/kibana

        dest: /etc/kibana/kibana.yml
        owner: "{{ kibana_user }}"
        group: "{{ kibana_group }}"
        mode: '0640' 

    - name: Создать каталог логов Kibana
      file:
        path: /var/log/kibana
        state: directory
        owner: "{{ kibana_user }}"
        group: "{{ kibana_group }}"
        mode: '0755'

    # --- Создание пустого файла лога Kibana ---
    - name: Создать файл лога Kibana
      copy:
        content: ""
        dest: /var/log/kibana/kibana.log
        owner: "{{ kibana_user }}"
        group: "{{ kibana_group }}"
        mode: '0644'
        force: no # Не перезаписывать, если файл уже существует

    - name: Создать unit-файл systemd для Kibana
      copy:
        content: |
          [Unit]
          Description=Kibana
          Documentation=https://www.elastic.co/guide/en/kibana/current/index.html
          Wants=network-online.target
          After=network-online.target

          [Service]
          Type=simple
          User={{ kibana_user }}
          Group={{ kibana_group }}
          Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin"
          ExecStart=/opt/kibana/current/bin/kibana --config /etc/kibana/kibana.yml
          # максимальное количество открытых файлов
          LimitNOFILE=65536
          # максимальный размер виртуальной памяти
          LimitMEMLOCK=infinity
          # перезапускать сервис при сбое
          Restart=always
          # время ожидания перед перезапуском
          RestartSec=10
          # каталоги для хранения данных и логов
          WorkingDirectory=/opt/kibana/current
          # установка прав umask для файлов, создаваемых Kibana
          UMask=0022

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/kibana.service
        owner: root
        group: root
        mode: '0644'
      notify:
        - Перезагрузить systemd
        - Включить и запустить Kibana

  handlers:
    - name: Перезагрузить systemd
      systemd:
        daemon_reload: yes

    - name: Включить и запустить Kibana
      systemd:
        name: kibana
        enabled: yes
        state: started

    - name: Перезапустить Kibana
      systemd:
        name: kibana
        state: restarted